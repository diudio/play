




-----------------------------------------------------------------------------------------------------------------------

git  版本控制工具   体现了开源文化
github  开源项目托管平台

commit  提交、创建版本

提交版本后若发现有问题，撤销可能会影响队友， 此时可以再提交一个反向操作版本 Revert this Commit
如果多个版本出现了问题，可以选择之前的一个正确版本，回滚到此 Roll Back to this Commit

push 发布版本， 推
pull   拉

master 主分支
Create a new branch off master 创建分支
delete 同时删除本地和远端分支
unpublish 只删除远端分支  

merge  融合   
rebase  和merge有细微区别


github flow    gitbub工作流程，是一个非常轻便的，基于分支的工作流，非常适合代码部署非常频繁的团队和项目
①创建新分支
②添加新版本
③开启一个Pull Request  用来发起对你做的各个版本的讨论     核心
④讨论和代码审核
⑤合并分支，然后部署























-------------------------------------------------------------------------------

本地仓库由 git 维护的三棵树组成。 
 	①工作目录，拥有实体文件。
	②暂存区，像个缓存区域，临时保存改动
	③HEAD，指向最后一次提交的结果

添加到暂存区：  git add <filename>
实际提交改动：  git commit -m "代码提交信息"  。  此时，代码改动已提交到HEAD，但是还没到远程仓库
提交到远端仓库：   git  push  origin  <分支名>

切换分支： get  checkout  <分支名>
更新本地仓库至最新改动：  git  pull
合并其他分支到当前分支：  git  merge  <分支名>
合并的时候可能出现冲突， 使用如下命令浏览差异：  git  diff  <源分支>  <目标分支>

操作失误时
替换本地改动：  git  checkout  --  <filename>	使用 HEAD 中的最新内容替换掉工作目录中的文件。 暂存区和新文件不会受影响
 若想丢弃本地的所有改动与提交， 可以到服务器上获取最新的版本历史，并将本地主分支指向它
get  fetch  origin
get  reset  --hard  origin/master